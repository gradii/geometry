var_1: &docker_image circleci/node:12.9.1
var_2: &docker-firefox-image circleci/node:12.9.1-browsers

# **Note**: When updating the beginning of the cache key, also update the cache key to match
# the new cache key prefix. This allows us to take advantage of CircleCI's fallback caching.
# Read more here: https://circleci.com/docs/2.0/caching/#restoring-cache.
var_3: &cache_key triangle-{{ checksum "WORKSPACE" }}-{{ checksum "yarn.lock" }}
# We want to invalidate the cache if the postinstall patches change. In order to apply new
# patches, a clean version of the node modules is needed. Additionally, we invalidate the cache
# if the Bazel version changes. We do this because otherwise the `bazelisk` cache folder will
# contain all previously used versions and ultimately cause the cache restoring to be slower.
var_4: &cache_fallback_key triangle-{{ checksum ".bazelversion" }}-

# Settings common to each job
var_5: &job_defaults
  working_directory: ~/ng
  docker:
    - image: *docker_image

# Job step for checking out the source code from GitHub. This also ensures that the source code
# is rebased on top of master.
var_6: &checkout_code
  checkout:
    # After checkout, rebase on top of master. By default, PRs are not rebased on top of master,
    # which we want. See https://discuss.circleci.com/t/1662
#    post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"
    post: git status

# Restores the cache that could be available for the current Yarn lock file. The cache usually
# includes the node modules and the Bazel repository cache.
var_7: &restore_cache
  restore_cache:
    keys:
      - *cache_key
      - *cache_fallback_key

# Saves the cache for the current Yarn lock file. We store the node modules and the Bazel
# repository cache in order to make subsequent builds faster.
var_8: &save_cache
  save_cache:
    key: *cache_key
    paths:
      - "node_modules"
      - "~/.cache/bazelisk"
      - "~/bazel_repository_cache"

# Decryption token that is used to decode the GCP credentials file in ".circleci/gcp_token".
#var_9: &gcp_decrypt_token "angular"

# Job step that ensures that the node module dependencies are installed and up-to-date. We use
# Yarn with the frozen lockfile option in order to make sure that lock file and package.json are
# in sync. Unlike in Travis, we don't need to manually purge the node modules if stale because
# CircleCI automatically discards the cache if the checksum of the lock file has changed.
var_10: &yarn_install
  run:
    name: "Installing project dependencies"
    command: yarn install --frozen-lockfile --non-interactive

# Installs all dependencies but does not enforce a frozen lockfile. Helpful when
# the "package.json" is updated as part of a CI job. e.g. when setting up snapshots.
var_11: &yarn_install_loose_lockfile
  run:
    name: "Installing project dependencies"
    command: yarn install --non-interactive

# Sets up the Bazel config which is specific for CircleCI builds.
var_12: &setup_bazel_ci_config
  run:
    name: "Setting up Bazel configuration for CI"
    command: |
      echo "import %workspace%/.circleci/bazel.rc" >> ./.bazelrc

# Attaches the release output which has been stored in the workspace to the current job.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
var_13: &attach_release_output
  attach_workspace:
    at: dist/

# Branch filter that we can specify for jobs that should only run on publish branches. This filter
# is used to ensure that not all upstream branches will be published as Github builds
# (e.g. revert branches, feature branches)
var_14: &publish_branches_filter
  branches:
    only:
      - master
      # 6.0.x, 7.1.x, etc.
      - /\d+\.\d+\.x/
      # 6.x, 7.x, 8.x etc
      - /\d+\.x/

# Branch filter that is usually applied to all jobs. Since there is no way within CircleCI to
# exclude a branch for all defined jobs, we need to manually specify the filters for each job.
# In order to reduce duplication we use a YAML anchor that just always excludes the "_presubmit"
# branch. We don't want to run Circle for the temporary "_presubmit" branch which is reserved
# for the caretaker.
var_15: &ignore_presubmit_branch_filter
  branches:
    ignore:
      - "_presubmit"

# Runs a script that sets up the Bazel remote execution. This will be used by jobs that run
# Bazel primarily and should benefit from remote caching and execution.
var_16: &setup_bazel_remote_execution
  run:
    name: "Setup bazel RBE remote execution"
    command: ./scripts/circleci/bazel/setup-remote-execution.sh

# Sets up the bazel binary globally. We don't want to access bazel through Yarn and NodeJS
# because it could mean that the Bazel child process only has access to limited memory.
var_17: &setup_bazel_binary
  run:
    name: "Setting up global Bazel binary"
    command: ./scripts/circleci/setup_bazel_binary.sh

# Sets up the Angular snapshot builds.
var_18: &setup_snapshot_builds
  run:
    name: "Setting up Angular snapshot builds"
    command: node ./scripts/circleci/setup-angular-snapshots.js master

# Filter to skip a job on builds for pull requests.
var_19: &skip_on_pull_requests_filter
  branches:
    ignore:
      - /pull\/\d+/

## Runs a script that sets up the Bazel remote execution. This will be used by jobs that run
## Bazel primarily and should benefit from remote caching and execution.
#var_14: &setup_bazel_remote_execution
#  run:
#    name: "Setup bazel RBE remote execution"
#    command: ./scripts/circleci/bazel/setup-remote-execution.sh

# -----------------------------
# Container version of CircleCI
# -----------------------------
version: 2

# -----------------------------------------------------------------------------------------
# Job definitions. Jobs which are defined just here, will not run automatically. Each job
# must be part of a workflow definition in order to run for PRs and push builds.
# -----------------------------------------------------------------------------------------
jobs:

  # -----------------------------------
  # Build and test job that uses Bazel.
  # -----------------------------------
  bazel_build:
    <<: *job_defaults
    resource_class: medium
    steps:
      - *checkout_code
      - *restore_cache
      - *setup_bazel_ci_config
      - *yarn_install
      - *setup_bazel_binary
#      - *setup_bazel_remote_execution
      - run: bazel build src/... --build_tag_filters=-docs-package,-release-package

  # ----------------------------------
  # Lint job. Runs the gulp lint task.
  # ----------------------------------
  lint:
    <<: *job_defaults
    steps:
      - *checkout_code
      - *restore_cache
      - *setup_bazel_ci_config
      - *yarn_install
      - *setup_bazel_binary

      - run:
          name: Checking rollup globals
          command: |
            bazel build //:rollup_globals
            yarn check-rollup-globals $(bazel info bazel-bin)/rollup_globals.json

      - run:
          name: Checking entry-points configuration
          command: |
            bazel build //:entry_points_manifest
            yarn check-entry-point-setup $(bazel info bazel-bin)/entry_points_manifest.json

      - run: ./scripts/circleci/lint-bazel-files.sh
      - run: yarn ownerslint
      # - run: yarn stylelint
      - run:
          command: |
            mkdir -p ~/reports
            yarn tslint ~/reports/tslint.xml -t checkstyle
      - store_test_results:
          path: ~/reports
      - *save_cache

  # -------------------------------------------------------------------------------------------
  # Job that builds all release packages with Gulp. The built packages can be then used in the
  # same workflow to publish snapshot builds or test the dev-app with the release packages.
  # -------------------------------------------------------------------------------------------
  build_release_packages:
    <<: *job_defaults
    resource_class: medium
    steps:
      - *checkout_code
      - *restore_cache
      - *setup_bazel_ci_config
#      - *setup_bazel_remote_execution
      - *yarn_install
      - *setup_bazel_binary

      - run: bazel build
      - run: yarn check-release-output

      # Store the release output in the workspace storage. This means that other jobs
      # in the same workflow can attach the release output to their job.
      - persist_to_workspace:
          root: dist
          paths:
            - "releases/**/*"

      # Since there is no UMD bundle that includes everything from the CDK, we need to move
      # all bundles into a directory. This allows us to store all CDK UMD bundles as job
      # artifacts that can be picked up by the Angular Github bot.
      - run:
          name: Prepare triangle artifacts for publish.
          command: |
            mkdir -p /tmp/triangle-umd-minified-bundles
            cp dist/releases/triangle/bundles/*.umd.min.js /tmp/triangle-umd-minified-bundles
      # Publish bundle artifacts which will be used to calculate the size change.
      # Note: Make sure that the size plugin from the Angular robot fetches the artifacts
      # from this CircleCI job (see .github/angular-robot.yml). Additionally any artifacts need to
      # be stored with the following path format: "{projectName}/{context}/{fileName}"
      # This format is necessary because otherwise the bot is not able to pick up the
      # artifacts from CircleCI. See:
      # https://github.com/angular/github-robot/blob/master/functions/src/plugins/size.ts#L392-L394
      - store_artifacts:
          path: dist/releases/triangle/bundles/triangle.umd.min.js
          destination: /gradii_triangle/triangle_release_output/triangle.umd.min.js
      - store_artifacts:
          path: /tmp/triangle-umd-minified-bundles
          destination: /gradii_triangle/triangle_release_output/

  # ----------------------------------------
  # Job that publishes the build snapshots
  # ----------------------------------------
  publish_snapshots:
    <<: *job_defaults
    resource_class: medium
    steps:
      - *checkout_code
      - *restore_cache
      - *attach_release_output
      - *setup_bazel_ci_config
#        - *setup_bazel_remote_execution
      - *yarn_install
      - *setup_bazel_binary

      # CircleCI has a config setting to enforce SSH for all github connections.
      # This is not compatible with our mechanism of using a Personal Access Token
      # to publish the build snapshots. In order to fix this, we unset the global option.
      - run: git config --global --unset "url.ssh://git@github.com.insteadof"
      - run: ./scripts/circleci/publish-snapshots.sh


  # ----------------------------------------------------------------------------
  # Job that runs the local browser tests against the Angular Github snapshots
  # ----------------------------------------------------------------------------
  snapshot_tests_local_browsers:
    docker:
      - image: *docker-firefox-image
    resource_class: medium
    steps:
      - *checkout_code
      - *restore_cache
      - *setup_bazel_ci_config
#      - *setup_bazel_remote_execution
      - *setup_snapshot_builds
      - *yarn_install_loose_lockfile
      - *setup_bazel_binary

      - run: bazel test src/... --build_tag_filters=-e2e --test_tag_filters=-e2e --build_tests_only

# ----------------------------------------------------------------------------------------
# Workflow definitions. A workflow usually groups multiple jobs together. This is useful if
# one job depends on another.
#
# NOTE: When updating this configuration section, make sure to update GitHub robot
#       config to match the new workflow jobs.
# ----------------------------------------------------------------------------------------
workflows:
  version: 2

  default_workflow:
    jobs:
      - bazel_build:
          filters: *ignore_presubmit_branch_filter
      - build_release_packages:
          filters: *ignore_presubmit_branch_filter
      - lint:
          filters: *ignore_presubmit_branch_filter
      - publish_snapshots:
          filters: *publish_branches_filter
          requires:
            - build_release_packages