@import "../variables";
@import './vendor-prefixes';

$btn-font-weight                : $font-weight-normal !default;
$btn-border-radius-base         : $border-radius-base !default;
$btn-border-radius-sm           : $border-radius-base !default;

$btn-height-base                : 2rem !default;
$btn-height-lg                  : 2.25rem !default;
$btn-height-sm                  : 1.75rem !default;

$btn-padding-x-lg               : 1.125rem !default;
$btn-padding-y-lg               : 0.375rem !default;
$btn-font-size-lg               : $font-size-lg !default;
$btn-line-height-lg             : 1 !default;

$btn-padding-x-base             : 1rem !default;
$btn-padding-y-base             : 0.3125rem !default;
$btn-font-size-base             : $font-size-base !default;
$btn-line-height-base           : 1 !default;

$btn-padding-x-sm               : 0.5rem !default;
$btn-padding-y-sm               : 0.25rem !default;
$btn-font-size-sm               : $font-size-sm !default;
$btn-line-height-sm             : 1 !default;


// Mixin overriding default button styles like the gray background, the border, and the outline.
@mixin tri-button-reset {
  @include user-select(none);
  cursor                      : pointer;
  outline                     : none;
  border                      : none;
  -webkit-tap-highlight-color : transparent;
}

// mixins for button
// ------------------------
@mixin button-size($btn-height, $padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding     : $padding-y $padding-x;
  height      : $btn-height;
  line-height : $line-height;

  @include font-size($font-size);
  @include border-radius($border-radius);
}

@mixin button-color($color, $background, $border) {
  color            : $color;
  background-color : $background;
  border-color     : $border;

  > a:only-child {
    color : currentColor;

    &:after {
      content    : '';
      position   : absolute;
      top        : 0;
      left       : 0;
      bottom     : 0;
      right      : 0;
      background : transparent;
    }
  }
}

@mixin button-group-base($btnClassName) {
  position : relative;
  display  : inline-flex;
  > .#{$btnClassName} {
    position : relative;
    z-index  : 1;

    &:hover,
    &:focus,
    &:active,
    &.active {
      z-index : 2;
    }

    &:disabled {
      z-index : 0;
    }
  }

  // size
  &-lg > .#{$btnClassName} {
    @include button-size(
        $btn-height-lg,
        $btn-padding-y-lg,
        $btn-padding-x-lg,
        $btn-font-size-lg,
        $btn-line-height-lg,
        $btn-border-radius-base
    );
  }

  &-sm > .#{$btnClassName} {
    @include button-size(
        $btn-height-sm,
        $btn-padding-y-sm,
        $btn-padding-x-sm,
        $btn-font-size-sm,
        $btn-line-height-sm,
        $btn-border-radius-sm
    );

    > .#{$iconfont-css-prefix} {
      font-size : $font-size-base,
    }
  }
}

// Base styles of buttons
// --------------------------------------------------
@mixin btn() {
  display          : inline-block;
  margin-bottom    : 0;
  font-weight      : $font-weight-normal;
  text-align       : center;
  touch-action     : manipulation;
  cursor           : pointer;
  background-image : none;
  border           : $border-width-base $border-style-base transparent;
  white-space      : nowrap;
  @include button-size(
      $btn-height-base,
      $btn-padding-y-base,
      $btn-padding-x-base,
      $btn-font-size-base,
      $btn-line-height-base,
      $btn-border-radius-base
  );
  user-select      : none;
  vertical-align   : middle;
  transition       : all .1s $ease-in-out;
  position         : relative;

  > .#{$iconfont-css-prefix} {
    line-height : 1;
  }

  &,
  &:active,
  &:focus {
    outline : 0;
  }

  &:not([disabled]):hover {
    text-decoration : none;
  }

  &:not([disabled]):active {
    outline    : 0;
    transition : none;
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & { // stylelint-disable-line selector-no-qualifying-type
    cursor         : not-allowed;
    pointer-events : none;
    opacity        : 0.65;
    @include box-shadow(none);
  }

  &-lg {
    @include button-size(
        $btn-height-lg,
        $btn-padding-y-lg,
        $btn-padding-x-lg,
        $btn-font-size-lg,
        $btn-line-height-lg,
        $btn-border-radius-base
    );
  }

  &-sm {
    @include button-size(
        $btn-height-sm,
        $btn-padding-y-sm,
        $btn-padding-x-sm,
        $btn-font-size-sm,
        $btn-line-height-sm,
        $btn-border-radius-sm
    );
  }

  //& + & {
  //  margin-left: 4px;
  //  margin-top: 4px;
  //}
}

// primary button style
@mixin btn-primary() {
  @include button-variant-primary($btn-primary-color, $btn-primary-bg);
}

// default button style
@mixin btn-default($theme) {
  $foreground: map-get($theme, foreground);
  $background: map-get($theme, background);
  $primary: map-get($theme, primary);

  @include button-variant-other(
      tri-color($foreground, btn-default-color),
      tri-color($foreground, btn-default-bg),
      tri-color($foreground, btn-default-border),
      tri-color($primary)
  );
  &:hover,
  &:focus,
  &:active,
  &.active {
    background : #fff;
  }
}


// circle button: the content only contains icon
@mixin btn-circle($btnClassName: btn) {
  @include square($btn-circle-size);
  @include button-size($btn-circle-size,
    0, 0, $btn-font-size-base, $btn-line-height-base, 50%);

  &.#{$btnClassName}-lg {
    @include square($btn-circle-size-lg);
    @include button-size($btn-circle-size-lg,
      0, 0, $btn-font-size-lg * 1.125, $btn-line-height-lg, 50%);
  }

  &.#{$btnClassName}-sm {
    @include square($btn-circle-size-sm);
    @include button-size($btn-circle-size-sm,
      0, 0, $btn-font-size-sm, $btn-line-height-sm, 50%);
  }
}

// Horizontal button groups styl
// --------------------------------------------------
@mixin btn-group($btnClassName: btn) {
  @include button-group-base($btnClassName);

  .#{$btnClassName} + .#{$btnClassName},
  .#{$btnClassName} + &,
  & + .#{$btnClassName},
  & + & {
    margin-left : -1px;
  }

  .#{$btnClassName}:not(:first-child):not(:last-child) {
    border-radius : 0;
    padding-left  : 8px;
    padding-right : 8px;
  }

  > .#{$btnClassName}:first-child {
    margin-left : 0;

    &:not(:last-child) {
      border-bottom-right-radius : 0;
      border-top-right-radius    : 0;
      padding-right              : 8px;
    }
  }

  > .#{$btnClassName}:last-child:not(:first-child) {
    border-bottom-left-radius : 0;
    border-top-left-radius    : 0;
    padding-left              : 8px;
  }

  & > & {
    float : left;
  }

  & > &:not(:first-child):not(:last-child) > .#{$btnClassName} {
    border-radius : 0;
  }

  & > &:first-child:not(:last-child) {
    > .#{$btnClassName}:last-child {
      border-bottom-right-radius : 0;
      border-top-right-radius    : 0;
      padding-right              : 8px;
    }
  }

  & > &:last-child:not(:first-child) > .#{$btnClassName}:first-child {
    border-bottom-left-radius : 0;
    border-top-left-radius    : 0;
    padding-left              : 8px;
  }
}


// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant(
  $background,
  $border,
  $color: color-contrast($background),
  $hover-background: darken($background, 7.5%),
  $hover-border: darken($border, 10%),
  $hover-color: color-contrast($hover-background),
  $active-background: darken($background, 10%),
  $active-border: darken($border, 12.5%),
  $active-color: color-contrast($active-background),
  $disabled-background: $background,
  $disabled-border: $border,
  $disabled-color: $color,
) {
  color        : $color;
  @include gradient-bg($background);
  border-color : $border;
  @include box-shadow($btn-box-shadow);

  &:hover {
    color        : $hover-color;
    @include gradient-bg($hover-background);
    border-color : $hover-border;
  }

  &:focus,
  &.focus {
    color        : $hover-color;
    @include gradient-bg($hover-background);
    border-color : $hover-border;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow : $btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);
    } @else {
      box-shadow : 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);
    }
  }

  &:active,
  &.active {
    color            : $active-color;
    background-color : $active-background;
    // Remove CSS gradients if they're enabled
    background-image : if($enable-gradients, none, null);
    border-color     : $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow : $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);
      } @else {
        box-shadow : 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);
      }
    }
  }

  &:disabled,
  &.disabled {
    color            : $disabled-color;
    background-color : $disabled-background;
    // Remove CSS gradients if they're enabled
    background-image : if($enable-gradients, none, null);
    border-color     : $disabled-border;
  }
}

@mixin button-outline-variant(
  $color,
  $color-hover: color-contrast($color),
  $active-background: $color,
  $active-border: $color,
  $active-color: color-contrast($active-background)
) {
  color        : $color;
  border-color : $color;

  &:hover {
    color            : $color-hover;
    background-color : $active-background;
    border-color     : $active-border;
  }

  &:focus,
  &.focus {
    box-shadow : 0 0 0 $btn-focus-width rgba($color, .5);
  }

  &:active,
  &.active,
  &.dropdown-toggle.show {
    color            : $active-color;
    background-color : $active-background;
    border-color     : $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow : $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
      } @else {
        box-shadow : 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }

  &:disabled,
  &.disabled {
    color            : $color;
    background-color : transparent;
  }
}

